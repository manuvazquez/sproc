# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_structure.ipynb.

# %% auto 0
__all__ = ['nested_tags_separator', 'assemble_name', 'is_multivalued', 'multivalued_columns']

# %% ../nbs/05_structure.ipynb 2
import pathlib
import re

import numpy as np
import pandas as pd

# %% ../nbs/05_structure.ipynb 13
nested_tags_separator = ' - '

# %% ../nbs/05_structure.ipynb 17
def assemble_name(tags: list) -> str:
    """
    Assemble the name of field/column in the DataFrame from a path of nested tags.
    
    **Parameters**
    
    - tags: list
    
        List of tags.
    
    **Returns**
    
    - out: str
    
        A suitable name.
    
    """
    
    tags = filter(pd.notna, tags)
    tags = filter(lambda x: x!='', tags)
    
    return nested_tags_separator.join(tags)

# %% ../nbs/05_structure.ipynb 25
def is_multivalued(s: pd.Series) -> bool:
    """
    Returns `True` is the given `pd.Series` has a `list` at any index.
    
    **Parameters**
    
    - s: pandas series
    
        Input
        
    **Returns**
    
    - out: bool
    
        `True` if the input contains some `list`.
    
    """
    
    # return s.apply(lambda x: type(x) == list).any()
    return s.apply(lambda x: (type(x) == list) or (type(x) == np.ndarray)).any()

# %% ../nbs/05_structure.ipynb 30
def multivalued_columns(df: pd.DataFrame) -> list:
    
    # `True` or `False` for every column
    is_column_multivalued = df.apply(is_multivalued, axis='index')
    
    return is_column_multivalued[is_column_multivalued==True].index.tolist()
